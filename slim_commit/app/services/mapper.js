angular.module('myApp').factory('mapper', ['$http', function ($http) {
    return {
        subjects: {
            a1: "Algebra I",
            a2: "Algebra II",
            w: "Writing",
            w1: "English I-Writing",
            w2: "English II-Writing",
            r: "Reading",
            r1: "English I-Reading",
            r2: "English II-Reading",
            us: "U.S. History",
            bi: "Biology",
            wg: "World Geography",
            ch: "chemistry",
            m: "Mathematics",
            s: "Science",
            h: "Social Studies",
            e1: "e1",
            e2: "e2",
        },
        spreadsheetFields: {
            County_Name: "County Name",
            District_Name: "District Name",
            Campus_Number: "Campus Number",
            Campus_Name: "Campus Name",
            Alternative_Ed_Campus: "Alternative Ed Campus",
            Charter: "Charter",
            Grade_Span: "Grade Span",
            School_Type: "School Type: E-Elementary, M-Middle, S-Senior, B-Both",
            All_Students_Count: "All Students Count",
            Econ_Disadv_Count: "Econ Disadv Count",
            Econ_Disadv_P: "Econ Disadv %",
            Non_Econ_Disdav_Count: "Non-Econ Disdav Count",
            Non_Econ_Disadv_P: "Non-Econ Disadv %",
            African_American_Count: "African American Count",
            African_American_P: "African American %",
            Hispanic_Count: "Hispanic Count",
            Hispanic_P: "Hispanic %",
            White_Count: "White Count",
            White_P: "White %",
            Other_Race_Count: "Other Race Count",
            Other_Race_P: "Other Race %",
            White_Other_Race_Count: "White / Other Race Count",
            White_Other_Race_P: "White / Other Race %",
            LEP_Count: "LEP Count",
            LEP_P: "LEP %",
            Non_LEP_Count: "Non-LEP Count",
            Non_LEP_P: "Non-LEP %",
            At_Risk_Count: "At Risk Count",
            At_Risk_P: "At Risk %",
            EE_Count: "EE Count",
            EE_P: "EE %",
            Pre_K_Count: "Pre-K Count",
            Pre_K_P: "Pre-K %",
            Kinder_Count: "Kinder Count",
            Kinder_P: "Kinder %",
            N1st_Grade_Count: "1st Grade Count",
            N1st_Grade_P: "1st Grade %",
            N2nd_Grade_Count: "2nd Grade Count",
            N2nd_Grade_P: "2nd Grade %",
            N3rd_Grade_Count: "3rd Grade Count",
            N3rd_Grade_P: "3rd Grade %",
            N4th_Grade_Count: "4th Grade Count",
            N4th_Grade_P: "4th Grade %",
            N5th_Grade_Count: "5th Grade Count",
            N5th_Grade_P: "5th Grade %",
            N6th_Grade_Count: "6th Grade Count",
            N6th_Grade_P: "6th Grade %",
            N7th_Grade_Count: "7th Grade Count",
            N7th_Grade_P: "7th Grade %",
            N8th_Grade_Count: "8th Grade Count",
            N8th_Grade_P: "8th Grade %",
            N9th_Grade_Count: "9th Grade Count",
            N9th_Grade_P: "9th Grade %",
            N10th_Grade_Count: "10th Grade Count",
            N10th_Grade_P: "10th Grade %",
            N11th_Grade_Count: "11th Grade Count",
            N11th_Grade_P: "11th Grade %",
            N12th_Grade_Count: "12th Grade Count",
            N12th_Grade_P: "12th Grade %",
            Mobile_Students: "Mobile Students",
            Mobility_P: "Mobility % (diff't year)",
            Total_Graduates_Count: "Total Graduates Count",
            African_American_Grads: "African American Grads",
            Hispanic_Grads: "Hispanic Grads",
            White_Grads: "White Grads",
            Other_Race_Grads: "Other Race Grads",
            Est_Econ_Disadv_1st_Graders: "Est Econ Disadv 1st Graders",
            Pre_K_Enrollment: "Pre-K Enrollment",
            Pre_K_Enrollment_Gap: "Pre-K Enrollment Gap",
            Pre_K_Enrollment_P: "Pre-K Enrollment %",
            Pre_K_Gap_P: "Pre-K Gap %",
            N3rd_Graders_Taking_Math_Exam: "3rd Graders Taking Math Exam",
            P_Level_2_Phase_In_1_3rd_Grade_Math: "% Level 2 Phase-In 1 3rd Grade Math",
            H_3rd_Graders_Not_Level_2_Phase_in_1_in_Math: "# 3rd Graders Not Level 2 Phase-in 1 in Math",
            P_Level_2_Fin_Rec_3rd_Grade_Math: "% Level 2 Fin Rec 3rd Grade Math",
            H_3rd_Graders_Not_Level_2_Fin_Rec_in_Math: "# 3rd Graders Not Level 2 Fin Rec in Math",
            N3rd_Graders_Taking_Rdg_Exam: "3rd Graders Taking Rdg Exam",
            P_Level_2_Phase_In_1_3rd_Grade_Rdg: "% Level 2 Phase-In 1 3rd Grade Rdg",
            H_3rd_Graders_Not_Level_2_Phase_in_1_in_Rdg: "# 3rd Graders Not Level 2 Phase-in 1 in Rdg",
            P_Level_2_Fin_Rec_3rd_Grade_Rdg: "% Level 2 Fin Rec 3rd Grade Rdg",
            H_3rd_Graders_Not_Level_2_Fin_Rec_in_Rdg: "# 3rd Graders Not Level 2 Fin Rec in Rdg",
            N4th_Graders_Taking_Math_Exam: "4th Graders Taking Math Exam",
            P_Level_2_Phase_In_1_4th_Grade_Math: "% Level 2 Phase-In 1 4th Grade Math",
            H_4th_Graders_Not_Level_2_Phase_in_1_in_Math: "# 4th Graders Not Level 2 Phase-in 1 in Math",
            P_Level_2_Fin_Rec_4th_Grade_Math: "% Level 2 Fin Rec 4th Grade Math",
            H_4th_Graders_Not_Level_2_Fin_Rec_in_Math: "# 4th Graders Not Level 2 Fin Rec in Math",
            N4th_Graders_Taking_Rdg_Exam: "4th Graders Taking Rdg Exam",
            P_Level_2_Phase_In_1_4th_Grade_Rdg: "% Level 2 Phase-In 1 4th Grade Rdg",
            H_4th_Graders_Not_Level_2_Phase_in_1_in_Rdg: "# 4th Graders Not Level 2 Phase-in 1 in Rdg",
            P_Level_2_Fin_Rec_4th_Grade_Rdg: "% Level 2 Fin Rec 4th Grade Rdg",
            H_4th_Graders_Not_Level_2_Fin_Rec_in_Rdg: "# 4th Graders Not Level 2 Fin Rec in Rdg",
            N8th_Graders_Taking_Sci_Exam: "8th Graders Taking Sci Exam",
            P_Level_2_Phase_In_1_8th_Grade_Sci: "% Level 2 Phase-In 1 8th Grade Sci",
            H_8th_Graders_Not_Level_2_Phase_in_1_in_Sci: "# 8th Graders Not Level 2 Phase-in 1 in Sci",
            P_Level_2_Fin_Rec_8th_Grade_Sci: "% Level 2 Fin Rec 8th Grade Sci",
            H_8th_Graders_Not_Level_2_Fin_Rec_in_Sci: "# 8th Graders Not Level 2 Fin Rec in Sci",
            Alg_1_Taking_Exam: "Alg 1 Taking Exam",
            P_Level_2_Phase_In_1_Alg_1: "% Level 2 Phase-In 1 Alg 1",
            H_Alg_1_Not_Level_2_Phase_in_1: "# Alg 1 Not Level 2 Phase-in 1",
            P_Level_2_Fin_Rec_Alg_1: "% Level 2 Fin Rec Alg 1",
            H_Alg_1_Not_Level_2_Fin_Rec: "# Alg 1 Not Level 2 Fin Rec",
            Phase_in_1_All_Grades_All_Subjects: "Phase-in 1 All Grades, All Subjects",
            Final_Rec_All_Grades_All_Subjects: "Final Rec All Grades, All Subjects",
            Percent_of_2013_Grads_Taking_SAT_ACT: "Percent of 2013 Grads Taking SAT/ACT",
            Percent_of_Grads_Above_Criterion: "Percent of Grads Above Criterion (1110 SAT or 24 ACT)",
            Percent_College_Ready: "Percent College Ready",
            Number_graduates_not_College_Ready: "Number graduates not College Ready"
        }
    };

}]);

angular.module('myApp').factory('lookup', ['$http', 'mapper', function ($http, mapper) {

    var extendo = {
        grades: [
           { name: "3", value: "3" },
           { name: "4", value: "4" },
           { name: "5", value: "5" },
           { name: "6", value: "6" },
           { name: "7", value: "7" },
           { name: "8", value: "8" },
           { name: "EOC", value: "EOC" }
        ],
        years: [
            { name: 12, value: "2012" },
            { name: 13, value: "2013" },
            { name: 14, value: "2014" }
        ],

    };

    extendo.subjects = _.map(mapper.subjects, function (value, key) { return { name: key, value: value }; });
    //extendo.categories = _.map(mapper.categories, function (value, key) { return { name: key, value: value }; });
    //extendo.demographies = _.map(mapper.demographies, function (value, key) { return { name: key, value: value }; });

    //_.each(extendo.aeis[0].value, function (item) { item.fields = _.map(item.fields, function (item) { return { name: item, value: mapper.aeisFields[item] || item }; }); });
    //_.each(extendo.aeis[1].value, function (item) { item.fields = _.map(item.fields, function (item) { return { name: item, value: mapper.aeisFields[item] || item }; }); });

    return extendo;

}]);